name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  TF_WORKSPACE: test
  TF_VAR_FILE: envs/test/terraform.tfvars

permissions:
  id-token: write
  contents: read

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: x64

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name: Setup Virtual env
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Activate and Install Dependencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Install dependencies
        run: pip3 install -r requirements.txt

      - name: Build and Run Test
        run: . venv/bin/activate && pytest

      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.12/site-packages
          zip -r9 ../../../../api.zip .

      - name: Add App to Zipfile
        run: cd ./app && zip -g ../api.zip -r .

      - name: Upload zip file artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: api.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v4
        with:
          name: api

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Workspace
        run: |
          terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

      - name: move zip file to terraform
        run: mv api.zip terraform/

      - name: Terraform Plan
        run: cd terraform && terraform plan -var-file=$TF_VAR_FILE -out=tfplan

      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve tfplan

      - name: Upload to S3
        run: |
          cd terraform
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          aws s3 cp api.zip s3://${S3_BUCKET_NAME}/api.zip

      - name: Deploy new Lambda
        run: |
          cd terraform
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          LAMBDA_FUNCTION_NAME=$(terraform output -raw lambda_function_name)
          aws lambda update-function-code --function-name ${LAMBDA_FUNCTION_NAME} --s3-bucket ${S3_BUCKET_NAME} --s3-key api.zip
